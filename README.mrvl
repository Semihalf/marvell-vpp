
Below are instructions for reproducing a working VPP environment on top of Marvell's Armada-7/8K SoCs
The document below specifies the exact versions used for reproducing the system, however, different
versions of these software components might be used, although, this might require some slight modifications
to the installation process.

1. Hardware
-----------
 - Armada-7/8K development / community board.
   (For the purpose of this readme, a 8040-McBin board was used).
 - Traffic generator (connected through the 10G ports).
 - External network access (for github, packages installation...) - through
   port 2 of McBin board (eth2).

2. Basic board preps
---------------------
 - Boot the board using some temporary Kernel / DTB images (temporary, as it
   will be replaced with a new Kernel in section #3).
 - Use ubuntu-arm64 file-system (ubuntu-16.04 was used in our case).
 - The following packages will be required during the installation process:
   # apt-get install git openssh-server make bc
   # apt-get install autoconf automake libtool
   # apt-get install ccache
   # (optional) apt-get install xterm socat zip telnet

3. MUSDK (part 1)
-----------------
 - Clone MUSDK code from github
   # cd /root/
   # git clone https://github.com/MarvellEmbeddedProcessors/musdk-marvell.git -b musdk-armada-17.10 musdk-marvell

4. Kernel
---------
 - Clone Kernel code from github
   # cd /root/
   # git clone https://github.com/MarvellEmbeddedProcessors/linux-marvell.git -b linux-4.4.52-armada-17.10 linux-marvell
 - Apply musdk kernel patches:
   # cd linux-marvell
   # git am /root/musdk-marvell/patches/linux/*.patch
 - Configure and build the Kernel
   # make mvebu_v8_lsp_defconfig
   # make -j4 Image dtbs modules
   # make modules_install
   # make install
   # cp arch/arm64/boot/Image arch/arm64/boot/dts/marvell/armada-8040-mcbin.dtb /boot/
 -  Reboot the board using the Kernel and DTB compiled above.

5. MUSDK (part 2)
-----------------
 - Configure & build musdk libraries / applications
   # cd /root/musdk-marvell
   # export KDIR=/root/linux-marvell
   # ./bootstrap
   # ./configure --enable-shared --enable-bpool-dma=64 --enable-bpool-cookie=32 --enable-sam --prefix=/usr
   # make -j4
   # make install
 - Build & install MUSDK modules
   # cd modules/
   # for i in dmax2 neta pp2 sam uio; do cd $i; make; make -C $KDIR M=`pwd` modules_install; cd -; done

6. pp2-sysfs driver
-------------------
 - Clone mvpp2-sysfs source code from github
   # cd /root/
   # git clone https://github.com/MarvellEmbeddedProcessors/mvpp2x-marvell.git -b mvpp2x-armada-17.10 pp2_sysfs
 - Build and install
   # cd /root/pp2_sysfs/sysfs/
   # cp Makefile_sysfs Makefile
   # export KDIR=/root/linux-marvell
   # export KERNEL_SOURCES=1
   # make
   # make -C $KDIR M=`pwd` modules_install

7. DPDK (Extract Marvell patches only)
--------------------------------------
 - The actual DPDK sources will be downloaded and built as part of VPP.
   We are cloning Marvell's DPDK port, in order to extract required patches for adapting the mainline DPDK
   to marvell network interfaces.
 - Clone Marvell's DPDK code
   # cd /root/
   # git clone https://github.com/MarvellEmbeddedProcessors/dpdk-marvell.git -b dpdk-17.05-armada-17.10 dpdk-marvell
 - Extract Marvell's patches on top of mainline DPDK
   # mkdir /root/dpdk-patches/
   # cd dpdk-marvell
   # git format-patch 2225554..HEAD -o /root/dpdk-patches/

8. VPP
------
 - Clone Marvell's VPP port
   # cd /root/
   # git clone https://github.com/MarvellEmbeddedProcessors/vpp-marvell.git -b vpp-devel vpp-marvell
 - Prepare build env
   # cd vpp-marvell/
   # export DPDK_VERSION=17.05
   # export AESNI=n
   # export LIBMUSDK_PATH=/usr/
   # make install-dep
   # make bootstrap
   # groupadd vpp
 - Copy DPDK patches:
   # cp /root/dpdk-patches/* dpdk/dpdk-17.05_patches/
 - Build vpp:
   # make -j4 build-release
 - Create VPP configuration file
   # mkdir -p /etc/vpp/
   # cp src/scripts/mrvl/mrvl_demo_startup.conf /etc/vpp/startup.conf

Running simple bridging setup (between eth0 & eth1 on McBin board)
-----------------------------
 - Load kernel modules
   # modprobe -a musdk_uio mv_dmax2_uio mv_pp_uio mv_sam_uio mvpp2x_sysfs
- Hugepages configuration
   # echo 1000 > /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages
 - Run VPP
   # export STARTUP_CONF=/etc/vpp/startup.conf
   # make run-release &
   # ifconfig eth0 up
   # ifconfig eth1 up
 - Connect to VPP CLI:
   # telnet 127.0.0.1 5002
 - (from CLI) create bridge, and associate 2 ports:
   # set interface state TenGigabitEthernet0 up
   # set interface state TenGigabitEthernet1 up
   # create bridge-domain 1
   # set interface l2 bridge TenGigabitEthernet0 1
   # set interface l2 bridge TenGigabitEthernet1 1

