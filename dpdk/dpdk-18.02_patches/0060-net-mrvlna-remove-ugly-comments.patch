From 1ba74da561eb088d07888f9e3578c30de30438cd Mon Sep 17 00:00:00 2001
From: Zyta Szpak <zr@semihalf.com>
Date: Sun, 18 Mar 2018 16:23:03 +0100
Subject: [PATCH 60/74] net/mrvlna: remove ugly comments

---
 drivers/net/mrvlna/mrvlna_ethdev.c | 23 +++--------------------
 1 file changed, 3 insertions(+), 20 deletions(-)

diff --git a/drivers/net/mrvlna/mrvlna_ethdev.c b/drivers/net/mrvlna/mrvlna_ethdev.c
index 7407865..1b2fb1b 100644
--- a/drivers/net/mrvlna/mrvlna_ethdev.c
+++ b/drivers/net/mrvlna/mrvlna_ethdev.c
@@ -553,7 +553,7 @@ mrvlna_rx_pkt_burst(void *rxq, struct rte_mbuf **rx_pkts, uint16_t nb_pkts)
 		/* drop packet in case of mac, overrun or resource error */
 		status = neta_ppio_inq_desc_get_l2_pkt_error(&descs[i]);
 		if (unlikely(status != NETA_DESC_ERR_OK)) {
-			/* TODO do we need to release it to mempool here? or if we resettet it shall it be reused and free when dev_stop? */
+			/* TODO free the mbuf since it was taken but it won't be used */
 			q->drop_mac++;
 			continue;
 		}
@@ -569,9 +569,7 @@ mrvlna_rx_pkt_burst(void *rxq, struct rte_mbuf **rx_pkts, uint16_t nb_pkts)
 		mbuf->l2_len = l3_offset;
 		mbuf->l3_len = l4_offset - l3_offset;
 
-		/* TODO recv checksum */
-//		if (likely(q->cksum_enabled))
-//			mbuf->ol_flags = mrvl_desc_to_ol_flags(&descs[i]);
+		/* TODO set here offloads&recv checksum */
 
 		rx_pkts[rx_done++] = mbuf;
 		q->bytes_recv += mbuf->pkt_len;
@@ -714,7 +712,6 @@ static int
 mrvlna_mtu_set(struct rte_eth_dev *dev, uint16_t mtu)
 {
 	struct neta_priv *priv = dev->data->dev_private;
-	/* extra MV_MH_SIZE bytes are required for Marvell tag */
 	uint16_t mru = MRVL_NETA_MTU_TO_MRU(mtu);
 
 	if (mtu < ETHER_MIN_MTU || mru > MRVLNA_PKT_SIZE_MAX) {
@@ -976,7 +973,7 @@ mrvlna_dev_start(struct rte_eth_dev *dev)
 		goto out;
 	}
 
-/* start tx queues */
+	/* start tx queues */
 	for (i = 0; i < dev->data->nb_tx_queues; i++) {
 		struct neta_txq *txq = dev->data->tx_queues[i];
 
@@ -990,9 +987,6 @@ mrvlna_dev_start(struct rte_eth_dev *dev)
 		 * All txqs are started by default. Stop them
 		 * so that tx_deferred_start works as expected.
 		 */
-//		ret = mrvlna_tx_queue_stop(dev, i);
-//		if (ret)
-//			goto out;
 	}
 
 	return 0;
@@ -1114,20 +1108,9 @@ static const struct eth_dev_ops mrvlna_ops = {
 	.dev_stop = mrvlna_dev_stop,
 	.dev_set_link_up = mrvlna_dev_set_link_up,
 	.dev_set_link_down = mrvlna_dev_set_link_down,
-//	.dev_close = ,
 	.link_update = mrvlna_link_update,
-//	.mac_addr_remove = ,
-//	.mac_addr_add = ,
-//	.mac_addr_set = ,
 	.mtu_set = mrvlna_mtu_set,
-//	.stats_get = ,
-//	.stats_reset = ,
 	.dev_infos_get = mrvlna_dev_infos_get,
-//	.dev_supported_ptypes_get = ,
-//	.rxq_info_get = ,
-//	.txq_info_get = ,
-//	.tx_queue_start = ,
-//	.tx_queue_stop = ,
 	.rx_queue_setup = mrvlna_rx_queue_setup,
 	.rx_queue_release = mrvlna_rx_queue_release,
 	.tx_queue_setup = mrvlna_tx_queue_setup,
-- 
2.7.4

