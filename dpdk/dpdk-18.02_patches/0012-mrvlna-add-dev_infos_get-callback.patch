From fc708e48dae4175f13594fe82d0a3a11c8ced873 Mon Sep 17 00:00:00 2001
From: Zyta Szpak <zr@semihalf.com>
Date: Thu, 15 Feb 2018 12:18:00 +0100
Subject: [PATCH 12/74] mrvlna: add dev_infos_get callback

---
 drivers/net/mrvlna/mrvlna_ethdev.c | 50 +++++++++++++++++++++++++++++++++++---
 drivers/net/mrvlna/mrvlna_ethdev.h | 30 +++++++++++++++++++++++
 2 files changed, 77 insertions(+), 3 deletions(-)

diff --git a/drivers/net/mrvlna/mrvlna_ethdev.c b/drivers/net/mrvlna/mrvlna_ethdev.c
index f12cc8f..5bbe6fe 100644
--- a/drivers/net/mrvlna/mrvlna_ethdev.c
+++ b/drivers/net/mrvlna/mrvlna_ethdev.c
@@ -58,8 +58,8 @@
 //TODO 1 check all the defines and offsets!!
 #define MRVL_MUSDK_DMA_MEMSIZE 41943040 // (40 * 1024 * 1024)
 //TODO 1
-#define MRVLNA_PKT_SIZE_MAX (10240 - MV_MH_SIZE)
-#define MRVLNA_MAC_ADDRS_MAX 25
+#define MRVLNA_PKT_SIZE_MAX (16382 - MV_MH_SIZE) /* 9700B */
+#define MRVLNA_MAC_ADDRS_MAX 256 /*16 UC, 256 IP, 256 MC/BC */
 /** Maximum length of a match string */
 #define MRVLNA_MATCH_LEN 16
 //TODO 1
@@ -276,6 +276,50 @@ mrvlna_dev_configure(struct rte_eth_dev *dev)
 	return 0;
 }
 
+/**
+ * DPDK callback to get information about the device.
+ *
+ * @param dev
+ *   Pointer to Ethernet device structure (unused).
+ * @param info
+ *   Info structure output buffer.
+ */
+static void
+mrvlna_dev_infos_get(struct rte_eth_dev *dev __rte_unused,
+		   struct rte_eth_dev_info *info)
+{
+	info->speed_capa = ETH_LINK_SPEED_10M |
+			   ETH_LINK_SPEED_100M |
+			   ETH_LINK_SPEED_1G |
+			   ETH_LINK_SPEED_2_5G;
+
+	info->max_rx_queues = MRVL_NETA_RXQ_MAX;
+	info->max_tx_queues = MRVL_NETA_TXQ_MAX;
+	info->max_mac_addrs = MRVLNA_MAC_ADDRS_MAX;
+
+	info->rx_desc_lim.nb_max = MRVL_NETA_RXD_MAX;
+	info->rx_desc_lim.nb_min = MRVL_NETA_RXD_MIN;
+	info->rx_desc_lim.nb_align = MRVL_NETA_RXD_ALIGN;
+
+	info->tx_desc_lim.nb_max = MRVL_NETA_TXD_MAX;
+	info->tx_desc_lim.nb_min = MRVL_NETA_TXD_MIN;
+	info->tx_desc_lim.nb_align = MRVL_NETA_TXD_ALIGN;
+
+	info->rx_offload_capa = DEV_RX_OFFLOAD_JUMBO_FRAME |
+				DEV_RX_OFFLOAD_IPV4_CKSUM |
+				DEV_RX_OFFLOAD_UDP_CKSUM |
+				DEV_RX_OFFLOAD_TCP_CKSUM;
+
+//	info->tx_offload_capa = DEV_TX_OFFLOAD_IPV4_CKSUM |
+//				DEV_TX_OFFLOAD_UDP_CKSUM |
+//				DEV_TX_OFFLOAD_TCP_CKSUM;
+
+	/* By default packets are dropped if no descriptors are available */
+	info->default_rxconf.rx_drop_en = 1;
+
+	info->max_rx_pktlen = MRVLNA_PKT_SIZE_MAX;
+}
+
 static const struct eth_dev_ops mrvlna_ops = {
 	.dev_configure = mrvlna_dev_configure,
 //	.dev_start = ,
@@ -290,7 +334,7 @@ static const struct eth_dev_ops mrvlna_ops = {
 //	.mtu_set = ,
 //	.stats_get = ,
 //	.stats_reset = ,
-//	.dev_infos_get = ,
+	.dev_infos_get = mrvlna_dev_infos_get,
 //	.dev_supported_ptypes_get = ,
 //	.rxq_info_get = ,
 //	.txq_info_get = ,
diff --git a/drivers/net/mrvlna/mrvlna_ethdev.h b/drivers/net/mrvlna/mrvlna_ethdev.h
index e5dca96..5d57eeb 100644
--- a/drivers/net/mrvlna/mrvlna_ethdev.h
+++ b/drivers/net/mrvlna/mrvlna_ethdev.h
@@ -52,6 +52,36 @@
 /** Packet offset inside RX buffer. */
 #define MRVL_PKT_OFFS 64
 
+/** Maximum number of rx/tx queues per port */
+#define MRVL_NETA_RXQ_MAX 8
+#define MRVL_NETA_TXQ_MAX 8
+
+/** Minimum/maximum number of descriptors in tx queue TODO is it? */
+#define MRVL_NETA_TXD_MIN 16
+#define MRVL_NETA_TXD_MAX 2048
+
+/** Tx queue descriptors alignment in B */
+#define MRVL_NETA_TXD_ALIGN 32
+
+/** Minimum/maximum number of descriptors in rx queue TODO is it? */
+#define MRVL_NETA_RXD_MIN 16
+#define MRVL_NETA_RXD_MAX 2048
+
+/** Rx queue descriptors alignment in B */
+#define MRVL_NETA_RXD_ALIGN 32
+
+/** Packet offset inside RX buffer. */
+#define MRVL_PKT_OFFS 64
+
+///** Maximum number of descriptors in shadow queue. Must be power of 2 */
+//#define MRVL_NETA_TX_SHADOWQ_SIZE MRVL_NETA_TXD_MAX
+//
+///** Shadow queue size mask (since shadow queue size is power of 2) */
+//#define MRVL_NETA_TX_SHADOWQ_MASK (MRVL_NETA_TX_SHADOWQ_SIZE - 1)
+//
+///** Minimum number of sent buffers to release from shadow queue to BM */
+//#define MRVL_NETA_BUF_RELEASE_BURST_SIZE	64
+
 struct neta_priv {
 	/* Hot fields, used in fast path. */
 	struct neta_bpool *bpool;  /**< BPool pointer */
-- 
2.7.4

