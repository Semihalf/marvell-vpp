diff --git a/drivers/net/mrvl/mrvl_ethdev.c b/drivers/net/mrvl/mrvl_ethdev.c
index 2921f7e..bdc7480 100644
--- a/drivers/net/mrvl/mrvl_ethdev.c
+++ b/drivers/net/mrvl/mrvl_ethdev.c
@@ -273,17 +273,29 @@ mrvl_dev_configure(struct rte_eth_dev *dev)
 	return mrvl_configure_rss(priv, &dev->data->dev_conf.rx_adv_conf.rss_conf);
 }
 
+static uint16_t gmtu = 1;
+
 static int
 mrvl_mtu_set(struct rte_eth_dev *dev, uint16_t mtu)
 {
-	struct mrvl_priv *priv = dev->data->dev_private;
 	/* extra MV_MH_SIZE bytes are required for Marvell tag */
 	uint16_t mru = mtu + MV_MH_SIZE + ETHER_HDR_LEN + ETHER_CRC_LEN;
-	int ret;
+	(void)dev;
+
 
 	if ((mtu < ETHER_MIN_MTU) || (mru > MRVL_PKT_SIZE_MAX))
 		return -EINVAL;
 
+	gmtu = mtu;
+	return 0;
+}
+
+static int mrvl_late_mtu_set(struct rte_eth_dev *dev, uint16_t mtu)
+{
+	struct mrvl_priv *priv = dev->data->dev_private;
+	uint16_t mru = mtu + MV_MH_SIZE + ETHER_HDR_LEN + ETHER_CRC_LEN;
+	int ret;
+
 	ret = pp2_ppio_set_mru(priv->ppio, mru);
 	if (ret)
 		return ret;
@@ -362,6 +374,9 @@ mrvl_dev_start(struct rte_eth_dev *dev)
 	if (ret)
 		return ret;
 
+	ret = mrvl_late_mtu_set(dev, gmtu);
+	if (ret)
+		return ret;
 	/*
 	 * In case there are some some stale uc/mc mac addresses flush them
 	 * here. It cannot be done during mrvl_dev_close() as port information
@@ -860,13 +875,19 @@ mrvl_vlan_filter_set(struct rte_eth_dev *dev, uint16_t vlan_id, int on)
 static int
 mrvl_fill_bpool(struct mrvl_rxq *rxq, int num)
 {
-	struct buff_release_entry entries[MRVL_PP2_TXD_MAX];
-	struct rte_mbuf *mbufs[MRVL_PP2_TXD_MAX];
+	static struct buff_release_entry entries[MRVL_PP2_TXD_MAX];
+	static struct rte_mbuf *mbufs[MRVL_PP2_TXD_MAX];
 	int i, ret;
-	unsigned core_id = rte_lcore_id();
-	struct pp2_hif *hif = hifs[core_id];
-	struct pp2_bpool *bpool = rxq->priv->bpool;
+	unsigned core_id;
+	struct pp2_hif *hif;
+	struct pp2_bpool *bpool;
 
+	core_id = rte_lcore_id();
+	RTE_PER_LCORE(_lcore_id) = 0;
+	core_id = rte_lcore_id();
+	hif = hifs[core_id];
+	bpool = rxq->priv->bpool;
+	
 	ret = rte_pktmbuf_alloc_bulk(rxq->mp, mbufs, num);
 	if (ret)
 		return ret;
@@ -1757,6 +1778,7 @@ rte_pmd_mrvl_remove(struct rte_vdev_device *vdev)
 	int i;
 	const char *name;
 
+	RTE_LOG(INFO, PMD, "----- %s: %d\n", __func__, __LINE__);
 	name = rte_vdev_device_name(vdev);
 	if (!name)
 		return -EINVAL;
diff --git a/lib/librte_eal/common/eal_common_dev.c b/lib/librte_eal/common/eal_common_dev.c
index a400ddd..41078c9 100644
--- a/lib/librte_eal/common/eal_common_dev.c
+++ b/lib/librte_eal/common/eal_common_dev.c
@@ -59,6 +59,7 @@ int rte_eal_dev_attach(const char *name, const char *devargs)
 			goto err;
 
 	} else {
+		RTE_LOG(ERR, EAL, "Scanning for device (%s)\n", name);
 		if (rte_vdev_init(name, devargs))
 			goto err;
 	}
diff --git a/lib/librte_eal/common/eal_common_vdev.c b/lib/librte_eal/common/eal_common_vdev.c
index 0037a64..3369783 100644
--- a/lib/librte_eal/common/eal_common_vdev.c
+++ b/lib/librte_eal/common/eal_common_vdev.c
@@ -126,6 +126,7 @@ vdev_probe_all_drivers(struct rte_vdev_device *dev)
 		if (!strncmp(driver->driver.name, name,
 			    strlen(driver->driver.name))) {
 			dev->device.driver = &driver->driver;
+			RTE_LOG(ERR, EAL, "---- probing driver %s\n", driver->driver.name);
 			ret = driver->probe(dev);
 			if (ret)
 				dev->device.driver = NULL;
@@ -159,12 +160,15 @@ find_vdev(const char *name)
 	if (!name)
 		return NULL;
 
+	RTE_LOG(ERR, EAL, "---- im here %s:%d\n", __func__, __LINE__);
 	TAILQ_FOREACH(dev, &vdev_device_list, next) {
 		const char *devname = rte_vdev_device_name(dev);
+		RTE_LOG(ERR, EAL, "---- matching against %s\n", devname);
 		if (!strncmp(devname, name, strlen(name)))
 			return dev;
 	}
 
+	RTE_LOG(ERR, EAL, "---- im here %s:%d\n", __func__, __LINE__);
 	return NULL;
 }
 
@@ -203,10 +207,12 @@ rte_vdev_init(const char *name, const char *args)
 	if (name == NULL)
 		return -EINVAL;
 
+		RTE_LOG(ERR, EAL, "---- im here %s:%d\n", __func__, __LINE__);
 	dev = find_vdev(name);
 	if (dev)
 		return -EEXIST;
 
+		RTE_LOG(ERR, EAL, "---- im here %s:%d\n", __func__, __LINE__);
 	devargs = alloc_devargs(name, args);
 	if (!devargs)
 		return -ENOMEM;
@@ -221,7 +227,9 @@ rte_vdev_init(const char *name, const char *args)
 	dev->device.numa_node = SOCKET_ID_ANY;
 	dev->device.name = devargs->virt.drv_name;
 
+		RTE_LOG(ERR, EAL, "---- im here %s:%d\n", __func__, __LINE__);
 	ret = vdev_probe_all_drivers(dev);
+		RTE_LOG(ERR, EAL, "---- im here %s:%d\n", __func__, __LINE__);
 	if (ret) {
 		if (ret > 0)
 			RTE_LOG(ERR, EAL, "no driver found for %s\n", name);
